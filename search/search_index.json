{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pygustus A python wrapper for the gene prediction program AUGUSTUS. Requirements To use Pygustus, an installed or built version of AUGUSTUS is required. Using Ubuntu, AUGUSTUS can be installed as follows. sudo apt install augustus augustus-data augustus-doc More information can be found on the AUGUSTUS GitHub page . If AUGUSTUS was built from source and no installation was done (so the command augustus is not executable), then the path to the executable can be set as described in the configuration section. For Pygustus Python version 3.6 or higher is required. Installation Currently Pygustus is in alpha development status. For testing purposes an early version is published on TestPyPI. Since the required biopython library is not available on TestPyPi, it must be installed before the Pygustus installation. This can be installed as follows. pip install biopython pip install -i https://test.pypi.org/simple/ pygustus Pygustus is currently not recommended for productive use . A release on PyPi will follow soon. Building Pygustus from source As an alternative to installing Pygustus from PyPi, Pygustus can also be built from source as follows. After cloning the repository from GitHub, git clone git@github.com:Gaius-Augustus/pygustus.git required dependencies need to be installed. pip install -r requirements.txt pip install -r requirements-dev.txt After that Pygustus can be built and installed as follows. python setup.py sdist bdist_wheel pip install dist/pygustus-<VERSION>.tar.gz For the execution of the tests pytest is used. pytest -m ghactions tests/ The test cases marked with ghactions are those that are not too expensive in terms of runtime. Usage Pygustuts supports the training and prediction of AUGUSTUS. The prediction can be executed either in a single thread or in parallel. In multithreaded execution, the input file is split into smaller pieces and AUGUSTUS is executed in parallel on partial inputs. Finally, the partial results are joined together. As values of the parameters for all Pygustus programs only the Python types are permissible. Training To train AUGUSTUS, the etraining program was adopted in Pygustus. More information about the program can be found here . The usage in Pygustus is as follows. from pygustus import etraining etraining.train('path/to/trainfilename', species='SPECIES') The species to be trained must be present in the config folder of AUGUSTUS (see also AUGUSTUS_CONFIG_PATH). To create a new species, the Pearl script new_species.pl from the script folder of AUGUSTUS can be used. If the path to the etraining executable is to be specified temporarily, the Pygustus parameter path_to_binary=path/to/etraining can be used. Prediction To run a prediction AUGUSTUS can be executed on the input file as usual or the input file can be split and AUGUSTUS is run on input parts in parallel. For the second variant the Pygustus parameter jobs=n must be set with n > 1 . Default (Single Thread) If the prediction is started without the Pygustus parameter jobs=n or with n == 1 , AUGUSTUS is executed on the input file exactly as if one would start AUGUSTUS from the console. Usage example: from pygustus import augustus augustus.predict('path/to/input/file', species='human', UTR=True, softmasking=False) To redirect the output to a file the AUGUSTUS parameters outfile and errfile can be used. Application example for the output of the prediction and the possible errors that occurred augustus.predict('path/to/input/file', species='human', UTR=True, softmasking=False outfile='out.gff', errfile='out.err') If the path to the AUGUSTUS executable is to be specified temporarily, the Pygustus parameter path_to_binary=path/to/augustus can be used. Multithreaded If the Pygustus parameter jobs=n is set with n > 1 , then the input file is split into several small files and Augustus is run in parallel for each file with the given parameters. After AUGUSTUS has been executed on all parts, the partial results are combined to the final result. If the parameter outfile is set, the result will be saved in the file given there. Otherwise, the result will be saved in the file augustus.gff (default). A usage example is shown below. from pygustus import augustus augustus.predict('path/to/input/file', [augustus_parameters], [pygustus_parameters], jobs=n) All parameters permitted for AUGUSTUS can be used as augustus_parameters. The following parameters for Pygustus are available. Parameter Default Value Description jobs (int) 1 If this option is set, AUGUSTUS is executed in parallel on sequence segments or split input files using n jobs. After the execution of all jobs, the output files are merged. chunksize (int) 0 If this option is set and jobs > 1 , each AUGUSTUS instance is executed on sequence segments of the maximum size n . overlap (int) 0 If this option is set and jobs > 1 , each AUGUSTUS instance is executed on sequence segments of size chunksize and the segments overlap by n . partitionHints (bool) False If this option is set to True, a hints file is given and jobs > 1 , then the hints file is split into appropriate pieces for the respective AUGUSTUS jobs. minSplitSize (int) 0 The input fasta file is spilt to at least minSplitSize=n base pairs. Set this to 0 to split the input in single sequence files. partitionLargeSeqeunces (bool) False Parallelize large sequences by automatically setting the AUGUSTUS parameters predictionStart and predictionEnd based on the given values for chunksize and overlap . debugOutputDir (string) None If the directory is specified, all generated files, i.e. the split of the input file and intermediate results, as well as the generated AUGUSTUS command lines are stored there. This option works only for the parallelization, i. e. jobs > 1 is set. path_to_bin (string) None Sets the path to the desired executable version of AUGUSTUS when augustus.predict() is called or etraining when etraining.train() is called. The path is not saved for further executions. To redirect the output to a file the AUGUSTUS parameters outfile and errfile can be used as for the default case. Configuration The paths to the augustus and etraining binaries be configured. This path is only used if the Pygustus parameter path_to_bin is not specified. This configuration is saved until the next change. The configuration is identical for pygustus.etraining and pygustus.augustus , so that the following example is restricted to pygustus.augustus . Read the configured path To get the the currently configured path to the executable of AUGUSTUS you can proceed as follows. from pygustus import augustus augustus.config_get_bin() Update the path to the binary To update the currently configured path to the executable of AUGUSTUS you can proceed as follows. augustus.config_set_bin(path/to/augustus) Set the default binary To set the default binary you can proceed as follows. augustus.config_set_default_bin() This method sets the configured path to the AUGUSTUS executable to augustus . This should exist if AUGUSTUS is properly installed on the system. As mentioned earlier, the configured path can be overridden by specifying the Pygustus parameter path_to_bin for the current prediction with augustus or the current training with etraining. Help To have easy access to the AUGUSTUS and Pygustus help system, the following methods are available. Method Description help() Shows usage information about the Pygustus wrapper and its parameters. show_aug_help() Shows the help output of AUGUSTUS, equivalent to the AUGUSTUS call with the parameter --help . show_aug_paramlist() Shows all possible parameter names of AUGUSTUS, equivalent to the AUGUSTUS call with the parameter --paramlist . show_species_info() Shows species information of AUGUSTUS, equivalent to the AUGUSTUS call with the parameter --species=help . Usage example from pygustus import augustus augustus.help()","title":"Home"},{"location":"#pygustus","text":"A python wrapper for the gene prediction program AUGUSTUS.","title":"Pygustus"},{"location":"#requirements","text":"To use Pygustus, an installed or built version of AUGUSTUS is required. Using Ubuntu, AUGUSTUS can be installed as follows. sudo apt install augustus augustus-data augustus-doc More information can be found on the AUGUSTUS GitHub page . If AUGUSTUS was built from source and no installation was done (so the command augustus is not executable), then the path to the executable can be set as described in the configuration section. For Pygustus Python version 3.6 or higher is required.","title":"Requirements"},{"location":"#installation","text":"Currently Pygustus is in alpha development status. For testing purposes an early version is published on TestPyPI. Since the required biopython library is not available on TestPyPi, it must be installed before the Pygustus installation. This can be installed as follows. pip install biopython pip install -i https://test.pypi.org/simple/ pygustus Pygustus is currently not recommended for productive use . A release on PyPi will follow soon.","title":"Installation"},{"location":"#building-pygustus-from-source","text":"As an alternative to installing Pygustus from PyPi, Pygustus can also be built from source as follows. After cloning the repository from GitHub, git clone git@github.com:Gaius-Augustus/pygustus.git required dependencies need to be installed. pip install -r requirements.txt pip install -r requirements-dev.txt After that Pygustus can be built and installed as follows. python setup.py sdist bdist_wheel pip install dist/pygustus-<VERSION>.tar.gz For the execution of the tests pytest is used. pytest -m ghactions tests/ The test cases marked with ghactions are those that are not too expensive in terms of runtime.","title":"Building Pygustus from source"},{"location":"#usage","text":"Pygustuts supports the training and prediction of AUGUSTUS. The prediction can be executed either in a single thread or in parallel. In multithreaded execution, the input file is split into smaller pieces and AUGUSTUS is executed in parallel on partial inputs. Finally, the partial results are joined together. As values of the parameters for all Pygustus programs only the Python types are permissible.","title":"Usage"},{"location":"#training","text":"To train AUGUSTUS, the etraining program was adopted in Pygustus. More information about the program can be found here . The usage in Pygustus is as follows. from pygustus import etraining etraining.train('path/to/trainfilename', species='SPECIES') The species to be trained must be present in the config folder of AUGUSTUS (see also AUGUSTUS_CONFIG_PATH). To create a new species, the Pearl script new_species.pl from the script folder of AUGUSTUS can be used. If the path to the etraining executable is to be specified temporarily, the Pygustus parameter path_to_binary=path/to/etraining can be used.","title":"Training"},{"location":"#prediction","text":"To run a prediction AUGUSTUS can be executed on the input file as usual or the input file can be split and AUGUSTUS is run on input parts in parallel. For the second variant the Pygustus parameter jobs=n must be set with n > 1 .","title":"Prediction"},{"location":"#default-single-thread","text":"If the prediction is started without the Pygustus parameter jobs=n or with n == 1 , AUGUSTUS is executed on the input file exactly as if one would start AUGUSTUS from the console. Usage example: from pygustus import augustus augustus.predict('path/to/input/file', species='human', UTR=True, softmasking=False) To redirect the output to a file the AUGUSTUS parameters outfile and errfile can be used. Application example for the output of the prediction and the possible errors that occurred augustus.predict('path/to/input/file', species='human', UTR=True, softmasking=False outfile='out.gff', errfile='out.err') If the path to the AUGUSTUS executable is to be specified temporarily, the Pygustus parameter path_to_binary=path/to/augustus can be used.","title":"Default (Single Thread)"},{"location":"#multithreaded","text":"If the Pygustus parameter jobs=n is set with n > 1 , then the input file is split into several small files and Augustus is run in parallel for each file with the given parameters. After AUGUSTUS has been executed on all parts, the partial results are combined to the final result. If the parameter outfile is set, the result will be saved in the file given there. Otherwise, the result will be saved in the file augustus.gff (default). A usage example is shown below. from pygustus import augustus augustus.predict('path/to/input/file', [augustus_parameters], [pygustus_parameters], jobs=n) All parameters permitted for AUGUSTUS can be used as augustus_parameters. The following parameters for Pygustus are available. Parameter Default Value Description jobs (int) 1 If this option is set, AUGUSTUS is executed in parallel on sequence segments or split input files using n jobs. After the execution of all jobs, the output files are merged. chunksize (int) 0 If this option is set and jobs > 1 , each AUGUSTUS instance is executed on sequence segments of the maximum size n . overlap (int) 0 If this option is set and jobs > 1 , each AUGUSTUS instance is executed on sequence segments of size chunksize and the segments overlap by n . partitionHints (bool) False If this option is set to True, a hints file is given and jobs > 1 , then the hints file is split into appropriate pieces for the respective AUGUSTUS jobs. minSplitSize (int) 0 The input fasta file is spilt to at least minSplitSize=n base pairs. Set this to 0 to split the input in single sequence files. partitionLargeSeqeunces (bool) False Parallelize large sequences by automatically setting the AUGUSTUS parameters predictionStart and predictionEnd based on the given values for chunksize and overlap . debugOutputDir (string) None If the directory is specified, all generated files, i.e. the split of the input file and intermediate results, as well as the generated AUGUSTUS command lines are stored there. This option works only for the parallelization, i. e. jobs > 1 is set. path_to_bin (string) None Sets the path to the desired executable version of AUGUSTUS when augustus.predict() is called or etraining when etraining.train() is called. The path is not saved for further executions. To redirect the output to a file the AUGUSTUS parameters outfile and errfile can be used as for the default case.","title":"Multithreaded"},{"location":"#configuration","text":"The paths to the augustus and etraining binaries be configured. This path is only used if the Pygustus parameter path_to_bin is not specified. This configuration is saved until the next change. The configuration is identical for pygustus.etraining and pygustus.augustus , so that the following example is restricted to pygustus.augustus .","title":"Configuration"},{"location":"#read-the-configured-path","text":"To get the the currently configured path to the executable of AUGUSTUS you can proceed as follows. from pygustus import augustus augustus.config_get_bin()","title":"Read the configured path"},{"location":"#update-the-path-to-the-binary","text":"To update the currently configured path to the executable of AUGUSTUS you can proceed as follows. augustus.config_set_bin(path/to/augustus)","title":"Update the path to the binary"},{"location":"#set-the-default-binary","text":"To set the default binary you can proceed as follows. augustus.config_set_default_bin() This method sets the configured path to the AUGUSTUS executable to augustus . This should exist if AUGUSTUS is properly installed on the system. As mentioned earlier, the configured path can be overridden by specifying the Pygustus parameter path_to_bin for the current prediction with augustus or the current training with etraining.","title":"Set the default binary"},{"location":"#help","text":"To have easy access to the AUGUSTUS and Pygustus help system, the following methods are available. Method Description help() Shows usage information about the Pygustus wrapper and its parameters. show_aug_help() Shows the help output of AUGUSTUS, equivalent to the AUGUSTUS call with the parameter --help . show_aug_paramlist() Shows all possible parameter names of AUGUSTUS, equivalent to the AUGUSTUS call with the parameter --paramlist . show_species_info() Shows species information of AUGUSTUS, equivalent to the AUGUSTUS call with the parameter --species=help . Usage example from pygustus import augustus augustus.help()","title":"Help"},{"location":"api-documentation/","text":"pygustus.augustus A python wrapper for the gene prediction program AUGUSTUS. predict predict(*args, *, options=None, **kwargs) Executes the binary of AUGUSTUS. For the execution the given parameters are passed as command line arguments. Arguments : *args tuple - Exactly one argument should be passed here. Either the queryfilename or one of the help calls of AUGUSTUS (--help, --pramlist). options AugustusOptions - Optional; If an instance of AugustusOptions is passed, it will be used for the call. Otherwise, a new instance is created based on the passed arguments (the default is None). **kwargs dict - Arguments for AUGUSTUS or Pygustus as dict: refer the documentation for a list of all possible arguments. config_get_bin config_get_bin() Returns currently configured path to the executable of AUGUSTUS. Returns : string - The currently configured path to the executable of AUGUSTUS. config_set_bin config_set_bin(value) Updates the configured path to the executable of AUGUSTUS. Arguments : value string - The path to the execuatble of AUGUSTUS as string. Raises : RuntimeError - If the given path does not exist or the file is not executable. config_set_default_bin config_set_default_bin() Sets the configured path to the AUGUSTUS executable to 'augustus'. This should exist if AUGUSTUS is properly installed on the system. show_fasta_info show_fasta_info(inputfile) Outputs information about a fasta file. This method outputs information about the contents of the passed file in fasta format. It is based on the Pearl script summarizeACGTcontent.pl. Arguments : inputfile string - Path to the file in fasta format as string. show_aug_help show_aug_help() Shows the help output of AUGUSTUS. show_aug_paramlist show_aug_paramlist() Shows possible parameter names of AUGUSTUS. show_species_info show_species_info() Shows species information of AUGUSTUS. help help() Shows usage information. pygustus.etraining A python wrapper for the training of AUGUSTUS. train train(*args, *, options=None, **kwargs) Executes etraining and passes the given parameters as command line arguments. Arguments : *args tuple - Only the the queryfilename should be passed here. options AugustusOptions - Optional; If an instance of AugustusOptions is passed, it will be used for the call. Otherwise, a new instance is created based on the passed arguments (the default is None). **kwargs dict - Arguments for Etraining or Pygustus: refer the documentation for a list of all possible arguments. config_get_bin config_get_bin() Outputs currently configured path to the executable of etraining. Returns : string - The currently configured path to the executable of etraining. config_set_bin config_set_bin(value) Updates the configured path to the executable of etraining. Arguments : value string - The path to the execuatble of etraining. Raises : RuntimeError - If the given path does not exist or the file is not executable. config_set_default_bin config_set_default_bin() Sets the configured path to the etraining executable to 'etraining'. This executable should exist if AUGUSTUS is properly installed on the system.","title":"API Documentation"},{"location":"api-documentation/#pygustusaugustus","text":"A python wrapper for the gene prediction program AUGUSTUS.","title":"pygustus.augustus"},{"location":"api-documentation/#predict","text":"predict(*args, *, options=None, **kwargs) Executes the binary of AUGUSTUS. For the execution the given parameters are passed as command line arguments. Arguments : *args tuple - Exactly one argument should be passed here. Either the queryfilename or one of the help calls of AUGUSTUS (--help, --pramlist). options AugustusOptions - Optional; If an instance of AugustusOptions is passed, it will be used for the call. Otherwise, a new instance is created based on the passed arguments (the default is None). **kwargs dict - Arguments for AUGUSTUS or Pygustus as dict: refer the documentation for a list of all possible arguments.","title":"predict"},{"location":"api-documentation/#config_get_bin","text":"config_get_bin() Returns currently configured path to the executable of AUGUSTUS. Returns : string - The currently configured path to the executable of AUGUSTUS.","title":"config_get_bin"},{"location":"api-documentation/#config_set_bin","text":"config_set_bin(value) Updates the configured path to the executable of AUGUSTUS. Arguments : value string - The path to the execuatble of AUGUSTUS as string. Raises : RuntimeError - If the given path does not exist or the file is not executable.","title":"config_set_bin"},{"location":"api-documentation/#config_set_default_bin","text":"config_set_default_bin() Sets the configured path to the AUGUSTUS executable to 'augustus'. This should exist if AUGUSTUS is properly installed on the system.","title":"config_set_default_bin"},{"location":"api-documentation/#show_fasta_info","text":"show_fasta_info(inputfile) Outputs information about a fasta file. This method outputs information about the contents of the passed file in fasta format. It is based on the Pearl script summarizeACGTcontent.pl. Arguments : inputfile string - Path to the file in fasta format as string.","title":"show_fasta_info"},{"location":"api-documentation/#show_aug_help","text":"show_aug_help() Shows the help output of AUGUSTUS.","title":"show_aug_help"},{"location":"api-documentation/#show_aug_paramlist","text":"show_aug_paramlist() Shows possible parameter names of AUGUSTUS.","title":"show_aug_paramlist"},{"location":"api-documentation/#show_species_info","text":"show_species_info() Shows species information of AUGUSTUS.","title":"show_species_info"},{"location":"api-documentation/#help","text":"help() Shows usage information.","title":"help"},{"location":"api-documentation/#pygustusetraining","text":"A python wrapper for the training of AUGUSTUS.","title":"pygustus.etraining"},{"location":"api-documentation/#train","text":"train(*args, *, options=None, **kwargs) Executes etraining and passes the given parameters as command line arguments. Arguments : *args tuple - Only the the queryfilename should be passed here. options AugustusOptions - Optional; If an instance of AugustusOptions is passed, it will be used for the call. Otherwise, a new instance is created based on the passed arguments (the default is None). **kwargs dict - Arguments for Etraining or Pygustus: refer the documentation for a list of all possible arguments.","title":"train"},{"location":"api-documentation/#config_get_bin_1","text":"config_get_bin() Outputs currently configured path to the executable of etraining. Returns : string - The currently configured path to the executable of etraining.","title":"config_get_bin"},{"location":"api-documentation/#config_set_bin_1","text":"config_set_bin(value) Updates the configured path to the executable of etraining. Arguments : value string - The path to the execuatble of etraining. Raises : RuntimeError - If the given path does not exist or the file is not executable.","title":"config_set_bin"},{"location":"api-documentation/#config_set_default_bin_1","text":"config_set_default_bin() Sets the configured path to the etraining executable to 'etraining'. This executable should exist if AUGUSTUS is properly installed on the system.","title":"config_set_default_bin"}]}